// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalPersonAPI.DataContext;

namespace NaturalPersonAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210712125928_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NaturalPersonAPI.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Asgard"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Gotham"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "New York City"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Wakanda"
                        },
                        new
                        {
                            Id = 5,
                            CityName = "Kutaisi"
                        });
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.NaturalPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("NaturalPeople");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BirthDate = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 3,
                            FirstName = "Pitter",
                            Gender = "Male",
                            LastName = "Parker",
                            PersonalNumber = "111"
                        },
                        new
                        {
                            Id = 2L,
                            BirthDate = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 4,
                            FirstName = "Black",
                            Gender = "Male",
                            LastName = "Panther",
                            PersonalNumber = "222"
                        },
                        new
                        {
                            Id = 3L,
                            BirthDate = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            FirstName = "Bruce",
                            Gender = "Male",
                            LastName = "Wayne",
                            PersonalNumber = "333"
                        },
                        new
                        {
                            Id = 4L,
                            BirthDate = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            FirstName = "Thor",
                            Gender = "Male",
                            LastName = "Odinson",
                            PersonalNumber = "333"
                        },
                        new
                        {
                            Id = 5L,
                            BirthDate = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 5,
                            FirstName = "Vazha",
                            Gender = "Male",
                            LastName = "Dvalishvili",
                            PersonalNumber = "333"
                        });
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.PhoneNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NaturalPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NaturalPersonId");

                    b.ToTable("PhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            NaturalPersonId = 1L,
                            Phone = "555555111",
                            Type = "Home"
                        },
                        new
                        {
                            Id = 2L,
                            NaturalPersonId = 1L,
                            Phone = "555111666",
                            Type = "Office"
                        },
                        new
                        {
                            Id = 3L,
                            NaturalPersonId = 2L,
                            Phone = "555444666",
                            Type = "Home"
                        },
                        new
                        {
                            Id = 4L,
                            NaturalPersonId = 2L,
                            Phone = "555888777",
                            Type = "Office"
                        });
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.Relation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RelatedPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("parentPersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Relations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RelatedPersonId = 2L,
                            RelationType = "Friend",
                            parentPersonId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            RelatedPersonId = 3L,
                            RelationType = "Other",
                            parentPersonId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            RelatedPersonId = 3L,
                            RelationType = "Friend",
                            parentPersonId = 2L
                        });
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.NaturalPerson", b =>
                {
                    b.HasOne("NaturalPersonAPI.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.PhoneNumber", b =>
                {
                    b.HasOne("NaturalPersonAPI.Domain.NaturalPerson", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("NaturalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NaturalPersonAPI.Domain.NaturalPerson", b =>
                {
                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
